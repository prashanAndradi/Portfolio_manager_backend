
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.0
 * Query Engine version: aee10d5a411e4360c6d3445ce4810ca65adbf3e8
 */
Prisma.prismaVersion = {
  client: "6.10.0",
  engine: "aee10d5a411e4360c6d3445ce4810ca65adbf3e8"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Account_typesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  description: 'description',
  created_at: 'created_at'
};

exports.Prisma.AccountsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  balance: 'balance',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.BrokersScalarFieldEnum = {
  id: 'id',
  broker_code: 'broker_code',
  broker_name: 'broker_name',
  building_number: 'building_number',
  street_name: 'street_name',
  street_name2: 'street_name2',
  city: 'city',
  province: 'province',
  zip_code: 'zip_code',
  country: 'country',
  contact_name: 'contact_name',
  contact_phone: 'contact_phone',
  contact_mobile: 'contact_mobile',
  contact_fax: 'contact_fax',
  contact_email: 'contact_email',
  broker_type: 'broker_type',
  brokerage_method: 'brokerage_method',
  brokerage_cal_method_id: 'brokerage_cal_method_id',
  brokerage_input_percentage: 'brokerage_input_percentage',
  brokerage_settlement_method_id: 'brokerage_settlement_method_id',
  settlement_account_number: 'settlement_account_number',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Chart_of_accountsScalarFieldEnum = {
  id: 'id',
  account_code: 'account_code',
  name: 'name',
  account_type_id: 'account_type_id',
  parent_account_id: 'parent_account_id',
  description: 'description',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Counterparty_limitsScalarFieldEnum = {
  id: 'id',
  counterparty_id: 'counterparty_id',
  counterparty_type: 'counterparty_type',
  overall_exposure_limit: 'overall_exposure_limit',
  currency_limit: 'currency_limit',
  product_money_market_limit: 'product_money_market_limit',
  product_fx_limit: 'product_fx_limit',
  product_derivative_limit: 'product_derivative_limit',
  product_repo_limit: 'product_repo_limit',
  product_reverse_repo_limit: 'product_reverse_repo_limit',
  product_gsec_limit: 'product_gsec_limit',
  product_sell_and_buy_back_limit: 'product_sell_and_buy_back_limit',
  product_buy_and_sell_back_limit: 'product_buy_and_sell_back_limit',
  tenor_limit: 'tenor_limit',
  settlement_risk_limit: 'settlement_risk_limit',
  country_limit: 'country_limit',
  group_limit: 'group_limit',
  intraday_limit: 'intraday_limit',
  created_at: 'created_at',
  product_transaction_limit: 'product_transaction_limit',
  currency: 'currency'
};

exports.Prisma.Counterparty_master_individualScalarFieldEnum = {
  id: 'id',
  title: 'title',
  short_name: 'short_name',
  long_name: 'long_name',
  id_type: 'id_type',
  house_number: 'house_number',
  street_name: 'street_name',
  province: 'province',
  postal_code: 'postal_code',
  city: 'city',
  country: 'country',
  telephone: 'telephone',
  email: 'email',
  mobile: 'mobile',
  created_at: 'created_at'
};

exports.Prisma.Counterparty_master_jointScalarFieldEnum = {
  id: 'id',
  title: 'title',
  short_name: 'short_name',
  long_name: 'long_name',
  id_type: 'id_type',
  house_number: 'house_number',
  street_name: 'street_name',
  province: 'province',
  postal_code: 'postal_code',
  city: 'city',
  country: 'country',
  telephone: 'telephone',
  email: 'email',
  mobile: 'mobile',
  created_at: 'created_at'
};

exports.Prisma.GsecScalarFieldEnum = {
  id: 'id',
  trade_type: 'trade_type',
  transaction_type: 'transaction_type',
  counterparty: 'counterparty',
  deal_number: 'deal_number',
  isin: 'isin',
  face_value: 'face_value',
  value_date: 'value_date',
  next_coupon_date: 'next_coupon_date',
  last_coupon_date: 'last_coupon_date',
  number_of_days_interest_accrued: 'number_of_days_interest_accrued',
  number_of_days_for_coupon_period: 'number_of_days_for_coupon_period',
  accrued_interest: 'accrued_interest',
  coupon_interest: 'coupon_interest',
  clean_price: 'clean_price',
  dirty_price: 'dirty_price',
  accrued_interest_calculation: 'accrued_interest_calculation',
  accrued_interest_six_decimals: 'accrued_interest_six_decimals',
  accrued_interest_for_100: 'accrued_interest_for_100',
  settlement_amount: 'settlement_amount',
  settlement_mode: 'settlement_mode',
  issue_date: 'issue_date',
  maturity_date: 'maturity_date',
  coupon_dates: 'coupon_dates',
  yield: 'yield',
  portfolio: 'portfolio',
  clean_price_adjustment: 'clean_price_adjustment',
  accrued_interest_adjustment: 'accrued_interest_adjustment',
  broker: 'broker',
  strategy: 'strategy',
  status: 'status',
  comment: 'comment',
  created_by: 'created_by',
  stratergy: 'stratergy',
  created_at: 'created_at',
  updated_by: 'updated_by',
  updated_at: 'updated_at',
  authorized_by: 'authorized_by',
  authorized_at: 'authorized_at',
  brokerage: 'brokerage',
  currency: 'currency'
};

exports.Prisma.Isin_coupon_scheduleScalarFieldEnum = {
  id: 'id',
  isin: 'isin',
  coupon_number: 'coupon_number',
  coupon_date: 'coupon_date',
  coupon_amount: 'coupon_amount',
  principal: 'principal'
};

exports.Prisma.Isin_masterScalarFieldEnum = {
  id: 'id',
  isin_issuer: 'isin_issuer',
  isin_number: 'isin_number',
  issue_date: 'issue_date',
  maturity_date: 'maturity_date',
  coupon_rate: 'coupon_rate',
  series: 'series',
  coupon_date_1: 'coupon_date_1',
  coupon_date_2: 'coupon_date_2',
  day_basis: 'day_basis',
  currency: 'currency',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Ledger_entriesScalarFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  entry_date: 'entry_date',
  debit_amount: 'debit_amount',
  credit_amount: 'credit_amount',
  currency: 'currency',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deal_number: 'deal_number'
};

exports.Prisma.Money_market_dealsScalarFieldEnum = {
  id: 'id',
  deal_number: 'deal_number',
  trade_date: 'trade_date',
  value_date: 'value_date',
  maturity_date: 'maturity_date',
  counterparty_type: 'counterparty_type',
  counterparty_id: 'counterparty_id',
  product_type: 'product_type',
  currency: 'currency',
  principal_amount: 'principal_amount',
  interest_rate: 'interest_rate',
  tenor: 'tenor',
  interest_amount: 'interest_amount',
  maturity_value: 'maturity_value',
  settlement_mode: 'settlement_mode',
  remarks: 'remarks',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Portfolio_masterScalarFieldEnum = {
  portfolio_id: 'portfolio_id',
  portfolio_name: 'portfolio_name',
  portfolio_type: 'portfolio_type',
  entity_business_unit: 'entity_business_unit',
  fund_manager_user_id: 'fund_manager_user_id',
  base_currency: 'base_currency',
  benchmark: 'benchmark',
  start_date: 'start_date',
  end_date: 'end_date',
  status: 'status',
  risk_profile: 'risk_profile',
  investment_horizon: 'investment_horizon',
  target_yield_return: 'target_yield_return',
  compliance_rules_id: 'compliance_rules_id',
  notes_description: 'notes_description',
  parent_portfolio_id: 'parent_portfolio_id',
  valuation_method: 'valuation_method',
  accounting_treatment: 'accounting_treatment',
  rebalancing_frequency: 'rebalancing_frequency',
  external_reference_code: 'external_reference_code',
  tags_categories: 'tags_categories',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SecuritiesScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.Settlement_accountsScalarFieldEnum = {
  id: 'id',
  bank_name: 'bank_name',
  bank_payment_code: 'bank_payment_code',
  bank_code: 'bank_code',
  address_building_number: 'address_building_number',
  address_street_name: 'address_street_name',
  address_street_name2: 'address_street_name2',
  address_city: 'address_city',
  address_province: 'address_province',
  address_zip_code: 'address_zip_code',
  address_country: 'address_country',
  contact_name: 'contact_name',
  contact_phone: 'contact_phone',
  contact_mobile: 'contact_mobile',
  contact_fax: 'contact_fax',
  contact_email: 'contact_email',
  account_type: 'account_type',
  bank_account_number: 'bank_account_number',
  bank_branch: 'bank_branch',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Strategy_masterScalarFieldEnum = {
  strategy_id: 'strategy_id',
  portfolio_name: 'portfolio_name',
  strategy_type: 'strategy_type',
  entity_business_unit: 'entity_business_unit'
};

exports.Prisma.Transaction_typesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  role: 'role',
  created_at: 'created_at',
  allowed_tabs: 'allowed_tabs',
  limit_id: 'limit_id'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.account_typesOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.accountsOrderByRelevanceFieldEnum = {
  name: 'name',
  type: 'type'
};

exports.Prisma.brokersOrderByRelevanceFieldEnum = {
  broker_code: 'broker_code',
  broker_name: 'broker_name',
  building_number: 'building_number',
  street_name: 'street_name',
  street_name2: 'street_name2',
  city: 'city',
  province: 'province',
  zip_code: 'zip_code',
  country: 'country',
  contact_name: 'contact_name',
  contact_phone: 'contact_phone',
  contact_mobile: 'contact_mobile',
  contact_fax: 'contact_fax',
  contact_email: 'contact_email',
  broker_type: 'broker_type',
  brokerage_method: 'brokerage_method',
  settlement_account_number: 'settlement_account_number'
};

exports.Prisma.chart_of_accountsOrderByRelevanceFieldEnum = {
  account_code: 'account_code',
  name: 'name',
  description: 'description'
};

exports.Prisma.counterparty_limitsOrderByRelevanceFieldEnum = {
  currency_limit: 'currency_limit',
  currency: 'currency'
};

exports.Prisma.counterparty_master_individualOrderByRelevanceFieldEnum = {
  title: 'title',
  short_name: 'short_name',
  long_name: 'long_name',
  id_type: 'id_type',
  house_number: 'house_number',
  street_name: 'street_name',
  province: 'province',
  postal_code: 'postal_code',
  city: 'city',
  country: 'country',
  telephone: 'telephone',
  email: 'email',
  mobile: 'mobile'
};

exports.Prisma.counterparty_master_jointOrderByRelevanceFieldEnum = {
  title: 'title',
  short_name: 'short_name',
  long_name: 'long_name',
  id_type: 'id_type',
  house_number: 'house_number',
  street_name: 'street_name',
  province: 'province',
  postal_code: 'postal_code',
  city: 'city',
  country: 'country',
  telephone: 'telephone',
  email: 'email',
  mobile: 'mobile'
};

exports.Prisma.gsecOrderByRelevanceFieldEnum = {
  trade_type: 'trade_type',
  transaction_type: 'transaction_type',
  counterparty: 'counterparty',
  deal_number: 'deal_number',
  isin: 'isin',
  settlement_mode: 'settlement_mode',
  coupon_dates: 'coupon_dates',
  portfolio: 'portfolio',
  clean_price_adjustment: 'clean_price_adjustment',
  accrued_interest_adjustment: 'accrued_interest_adjustment',
  broker: 'broker',
  strategy: 'strategy',
  status: 'status',
  comment: 'comment',
  stratergy: 'stratergy',
  currency: 'currency'
};

exports.Prisma.isin_coupon_scheduleOrderByRelevanceFieldEnum = {
  isin: 'isin'
};

exports.Prisma.isin_masterOrderByRelevanceFieldEnum = {
  isin_issuer: 'isin_issuer',
  isin_number: 'isin_number',
  series: 'series',
  currency: 'currency'
};

exports.Prisma.ledger_entriesOrderByRelevanceFieldEnum = {
  currency: 'currency',
  description: 'description',
  deal_number: 'deal_number'
};

exports.Prisma.money_market_dealsOrderByRelevanceFieldEnum = {
  deal_number: 'deal_number',
  product_type: 'product_type',
  currency: 'currency',
  settlement_mode: 'settlement_mode',
  remarks: 'remarks'
};

exports.Prisma.portfolio_masterOrderByRelevanceFieldEnum = {
  portfolio_id: 'portfolio_id',
  portfolio_name: 'portfolio_name',
  portfolio_type: 'portfolio_type',
  entity_business_unit: 'entity_business_unit',
  fund_manager_user_id: 'fund_manager_user_id',
  base_currency: 'base_currency',
  benchmark: 'benchmark',
  compliance_rules_id: 'compliance_rules_id',
  notes_description: 'notes_description',
  parent_portfolio_id: 'parent_portfolio_id',
  valuation_method: 'valuation_method',
  accounting_treatment: 'accounting_treatment',
  rebalancing_frequency: 'rebalancing_frequency',
  external_reference_code: 'external_reference_code',
  tags_categories: 'tags_categories'
};

exports.Prisma.securitiesOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.settlement_accountsOrderByRelevanceFieldEnum = {
  bank_name: 'bank_name',
  bank_payment_code: 'bank_payment_code',
  bank_code: 'bank_code',
  address_building_number: 'address_building_number',
  address_street_name: 'address_street_name',
  address_street_name2: 'address_street_name2',
  address_city: 'address_city',
  address_province: 'address_province',
  address_zip_code: 'address_zip_code',
  address_country: 'address_country',
  contact_name: 'contact_name',
  contact_phone: 'contact_phone',
  contact_mobile: 'contact_mobile',
  contact_fax: 'contact_fax',
  contact_email: 'contact_email',
  account_type: 'account_type',
  bank_account_number: 'bank_account_number',
  bank_branch: 'bank_branch'
};

exports.Prisma.strategy_masterOrderByRelevanceFieldEnum = {
  strategy_id: 'strategy_id',
  portfolio_name: 'portfolio_name',
  strategy_type: 'strategy_type',
  entity_business_unit: 'entity_business_unit'
};

exports.Prisma.transaction_typesOrderByRelevanceFieldEnum = {
  name: 'name',
  category: 'category'
};

exports.Prisma.usersOrderByRelevanceFieldEnum = {
  username: 'username',
  password: 'password',
  allowed_tabs: 'allowed_tabs'
};
exports.account_types_category = exports.$Enums.account_types_category = {
  asset: 'asset',
  liability: 'liability',
  equity: 'equity',
  revenue: 'revenue',
  expense: 'expense'
};

exports.counterparty_limits_counterparty_type = exports.$Enums.counterparty_limits_counterparty_type = {
  individual: 'individual',
  joint: 'joint'
};

exports.money_market_deals_counterparty_type = exports.$Enums.money_market_deals_counterparty_type = {
  individual: 'individual',
  joint: 'joint'
};

exports.portfolio_master_status = exports.$Enums.portfolio_master_status = {
  Active: 'Active',
  Inactive: 'Inactive'
};

exports.portfolio_master_risk_profile = exports.$Enums.portfolio_master_risk_profile = {
  Conservative: 'Conservative',
  Moderate: 'Moderate',
  Aggressive: 'Aggressive'
};

exports.portfolio_master_investment_horizon = exports.$Enums.portfolio_master_investment_horizon = {
  Short_term: 'Short_term',
  Medium_term: 'Medium_term',
  Long_term: 'Long_term'
};

exports.users_role = exports.$Enums.users_role = {
  user: 'user',
  authorizer: 'authorizer'
};

exports.Prisma.ModelName = {
  account_types: 'account_types',
  accounts: 'accounts',
  brokers: 'brokers',
  chart_of_accounts: 'chart_of_accounts',
  counterparty_limits: 'counterparty_limits',
  counterparty_master_individual: 'counterparty_master_individual',
  counterparty_master_joint: 'counterparty_master_joint',
  gsec: 'gsec',
  isin_coupon_schedule: 'isin_coupon_schedule',
  isin_master: 'isin_master',
  ledger_entries: 'ledger_entries',
  money_market_deals: 'money_market_deals',
  portfolio_master: 'portfolio_master',
  securities: 'securities',
  settlement_accounts: 'settlement_accounts',
  strategy_master: 'strategy_master',
  transaction_types: 'transaction_types',
  users: 'users'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
